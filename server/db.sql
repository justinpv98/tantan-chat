CREATE TABLE IF NOT EXISTS user_status (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    type VARCHAR(16) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS "user" (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (MAXVALUE 99999999),
    email VARCHAR (255) UNIQUE NOT NULL,
    username VARCHAR (32) UNIQUE NOT NULL,
    password VARCHAR (128) NOT NULL,
    profile_picture VARCHAR (80),
    status INT DEFAULT 1 NOT NULL REFERENCES user_status (id), 
    created_at TIMESTAMP DEFAULT now() NOT NULL
);

CREATE UNIQUE INDEX idx_email ON "user" (
    email,
    password
);

CREATE UNIQUE INDEX idx_username ON "user" (
    username
);

CREATE TABLE "session" (
  "sid" VARCHAR NOT NULL COLLATE "default",
  "sess" JSON NOT NULL,
  "expire" TIMESTAMP(6) NOT NULL
)
WITH (OIDS=FALSE);

ALTER TABLE "session" 
ADD CONSTRAINT "session_pkey" PRIMARY KEY ("sid") NOT DEFERRABLE INITIALLY IMMEDIATE;

CREATE INDEX "IDX_session_expire" ON "session" ("expire");

CREATE TABLE IF NOT EXISTS relationship_type (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    type VARCHAR(16) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS relationship (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    type INT UNIQUE NOT NULL,
    actor INT NOT NULL,
    target INT NOT NULL,
    UNIQUE (actor, target),
    FOREIGN KEY (type)
        REFERENCES relationship_type (id),
    FOREIGN KEY (actor)
        REFERENCES "user" (id),
    FOREIGN KEY (target)
        REFERENCES "user" (id)
);

CREATE TABLE IF NOT EXISTS conversation (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START 100000000),
    owner INT,
    name VARCHAR(32),
    FOREIGN KEY (owner)
        REFERENCES "user" (id)
);

CREATE TABLE IF NOT EXISTS conversation_participants (
    id  INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    conversation INT NOT NULL,
    "user" INT NOT NULL,
    joined_at TIMESTAMP NOT NULL,
    left_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    FOREIGN KEY (conversation)
        REFERENCES conversation (id),
    FOREIGN KEY ("user")
        REFERENCES "user" (id)
);



CREATE TABLE IF NOT EXISTS message (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    author INT NOT NULL,
    conversation INT NOT NULL,
    data TEXT NOT NULL,
    parent INT,
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    modified_at TIMESTAMP,
    FOREIGN KEY (conversation)
        REFERENCES conversation (id)
    FOREIGN KEY (parent)
        REFERENCES message (id)
);

CREATE TABLE IF NOT EXISTS attachments (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    message_id INT NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    url VARCHAR(255) NOT NULL,
    FOREIGN KEY (message_id)
        REFERENCES message (id)
);

INSERT INTO user_status (
    type
) VALUES ('online');

INSERT INTO user_status (
    type
) VALUES ('dnd');

INSERT INTO user_status (
    type
) VALUES ('offline');

INSERT INTO relationship_type (
    type
) VALUES ('friend');

INSERT INTO relationship_type (
    type
) VALUES ('blocked');

INSERT INTO relationship_type (
    type
) VALUES ('sent request');

INSERT INTO relationship_type (
    type
) VALUES ('received request');

CREATE  FUNCTION update_modified_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.modified_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_modified_table
    BEFORE UPDATE
    ON
        message
    FOR EACH ROW
EXECUTE PROCEDURE update_modified_at();